// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.PrintCommand;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.cscore.HttpCamera;
import edu.wpi.first.math.MathUtil;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.Trigger;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems

    public final ArmElevator m_armElevator = new ArmElevator();
    public final Drivertrain m_drivertrain = new Drivertrain();
    public final Intake m_intake = new Intake();
// Joysticks
private final Joystick co_DriverController = new Joystick(1);
private final CommandXboxController driverControler = new CommandXboxController(0);
private final XboxController m_otherDriverController = new XboxController(2);

private ShuffleboardTab teleopTab = Shuffleboard.getTab("TeleOp");
private ShuffleboardTab AutoTab = Shuffleboard.getTab("Autonomous");
private SendableChooser<String> autoChooser = new SendableChooser<>();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  public RobotContainer() {

    AutoTab.add(autoChooser);
    autoChooser.addOption("CenterBalance", "CenterBalance");
    autoChooser.addOption("CableSideAuto", "CableSideAuto");
    autoChooser.addOption("OverAndBackAuto", "OverAndBackAuto");
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    SmartDashboard.putData(m_armElevator);
    teleopTab.addDouble("GyroRoll", m_drivertrain::getRoll);
    configureButtonBindings();

    // Configure default commands

        // m_drivertrain.setDefaultCommand(new DriveWithJoy(() -> -driverControler.getRawAxis(1), 
        //                                               () -> driverControler.getRawAxis(2), m_drivertrain));


    m_drivertrain.setDefaultCommand(new DriveWithJoy(() -> -m_otherDriverController.getLeftY(), 
                                                      () -> m_otherDriverController.getRightX(), m_drivertrain));
    m_armElevator.setDefaultCommand(new ArmElevatorRun(() -> MathUtil.applyDeadband(co_DriverController.getRawAxis(0), 0.30), m_armElevator));
    
    LimelightHelpers.setCameraMode_Driver("limelight");
    teleopTab.addCamera("driverCamera", "limelight", "http://10.88.78.11:5800/stream.mjpg"); //https://10.60.45.11:5800


        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
//final JoystickButton paddleClose_Btn = new JoystickButton(co_DriverController, 6);        
//paddleClose_Btn.onTrue(new PaddleRun(false, m_paddle).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
//final JoystickButton paddleOpen_Btn = new JoystickButton(co_DriverController, 5);        
//paddleOpen_Btn.onTrue(new PaddleRun(true, m_paddle).withInterruptBehavior(InterruptionBehavior.kCancelSelf));




// final JoystickButton intake_Button = new JoystickButton(co_DriverController, 5);        
// intake_Button.whileTrue(new IntakeInCommand(m_intake));
// final JoystickButton rel_Button = new JoystickButton(co_DriverController, 6);        
// rel_Button.whileTrue(new IntakeOutCommand(m_intake));

new Trigger(()->co_DriverController.getRawButton(5)).whileTrue(new IntakeInCommand(m_intake));
new Trigger(()->co_DriverController.getRawButton(6)).whileTrue(new IntakeOutCommand(m_intake));
                        
// final JoystickButton extensionRetract_Btn = new JoystickButton(co_DriverController, 4);        
// extensionRetract_Btn.whileTrue(new ArmExtensionRun(() -> -1, m_armExtension).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
// final JoystickButton extensionExt_Btn = new JoystickButton(co_DriverController, 3);        
// extensionExt_Btn.whileTrue(new ArmExtensionRun(() -> 1, m_armExtension).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
// final JoystickButton elevatorLower_Btn = new JoystickButton(co_DriverController, 2);        
// elevatorLower_Btn.whileTrue(new ArmElevatorRun(() -> -0.75, m_armElevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
// final JoystickButton elevatorRaise_btn = new JoystickButton(co_DriverController, 1);        
// elevatorRaise_btn.whileTrue(new ArmElevatorRun(() -> 0.75, m_armElevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
// final Trigger runAutoBalance = new JoystickButton(co_DriverController, 7);
// runAutoBalance.onTrue(new AutoBalanceAlternate(m_drivertrain));


new JoystickButton(m_otherDriverController, XboxController.Button.kB.value).onTrue(new AutoBalanceAlternate(m_drivertrain));
new JoystickButton(m_otherDriverController, XboxController.Button.kY.value).onTrue(new SetBrakeMode(m_drivertrain));
new JoystickButton(m_otherDriverController, XboxController.Button.kA.value).onTrue(new SetCoastMode(m_drivertrain));



// final Trigger brake_btn = driverControler.a();
// brake_btn.onTrue(new SetBrakeMode(m_drivertrain));

// final Trigger coast_btn = driverControler.y();
// coast_btn.onTrue(new SetCoastMode(m_drivertrain));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getDriverControler() {
      return driverControler.getHID();
    }

public Joystick getCo_DriverController() {
        return co_DriverController;
    }

public void setCoast(){
  m_drivertrain.setCoast();
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous

if (autoChooser.getSelected().toString().equals("CenterBalance"))
    return new AutoCommand(m_drivertrain, m_armElevator, m_intake);
else if(autoChooser.getSelected().equals("CableSideAuto"))
     return new CableSideAuto(m_drivertrain, m_armElevator, m_intake);
else if(autoChooser.getSelected().equals("OverAndBackAuto"))
     return new OverAndBackAuto(m_drivertrain, m_armElevator, m_intake);

//    return m_chooser.getSelected();
return new PrintCommand("yeah");
  }
  

}

